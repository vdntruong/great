// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package dao

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addCartItemStmt, err = db.PrepareContext(ctx, addCartItem); err != nil {
		return nil, fmt.Errorf("error preparing query AddCartItem: %w", err)
	}
	if q.clearCartStmt, err = db.PrepareContext(ctx, clearCart); err != nil {
		return nil, fmt.Errorf("error preparing query ClearCart: %w", err)
	}
	if q.createCartStmt, err = db.PrepareContext(ctx, createCart); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCart: %w", err)
	}
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.createOrderItemStmt, err = db.PrepareContext(ctx, createOrderItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrderItem: %w", err)
	}
	if q.deleteCartStmt, err = db.PrepareContext(ctx, deleteCart); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCart: %w", err)
	}
	if q.deleteOrderStmt, err = db.PrepareContext(ctx, deleteOrder); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrder: %w", err)
	}
	if q.getCartStmt, err = db.PrepareContext(ctx, getCart); err != nil {
		return nil, fmt.Errorf("error preparing query GetCart: %w", err)
	}
	if q.getOrderStmt, err = db.PrepareContext(ctx, getOrder); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrder: %w", err)
	}
	if q.getOrderItemsStmt, err = db.PrepareContext(ctx, getOrderItems); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderItems: %w", err)
	}
	if q.listOrdersStmt, err = db.PrepareContext(ctx, listOrders); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrders: %w", err)
	}
	if q.removeCartItemStmt, err = db.PrepareContext(ctx, removeCartItem); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveCartItem: %w", err)
	}
	if q.updateCartItemStmt, err = db.PrepareContext(ctx, updateCartItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCartItem: %w", err)
	}
	if q.updateOrderStatusStmt, err = db.PrepareContext(ctx, updateOrderStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrderStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addCartItemStmt != nil {
		if cerr := q.addCartItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addCartItemStmt: %w", cerr)
		}
	}
	if q.clearCartStmt != nil {
		if cerr := q.clearCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing clearCartStmt: %w", cerr)
		}
	}
	if q.createCartStmt != nil {
		if cerr := q.createCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCartStmt: %w", cerr)
		}
	}
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.createOrderItemStmt != nil {
		if cerr := q.createOrderItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderItemStmt: %w", cerr)
		}
	}
	if q.deleteCartStmt != nil {
		if cerr := q.deleteCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCartStmt: %w", cerr)
		}
	}
	if q.deleteOrderStmt != nil {
		if cerr := q.deleteOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderStmt: %w", cerr)
		}
	}
	if q.getCartStmt != nil {
		if cerr := q.getCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCartStmt: %w", cerr)
		}
	}
	if q.getOrderStmt != nil {
		if cerr := q.getOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderStmt: %w", cerr)
		}
	}
	if q.getOrderItemsStmt != nil {
		if cerr := q.getOrderItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderItemsStmt: %w", cerr)
		}
	}
	if q.listOrdersStmt != nil {
		if cerr := q.listOrdersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrdersStmt: %w", cerr)
		}
	}
	if q.removeCartItemStmt != nil {
		if cerr := q.removeCartItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeCartItemStmt: %w", cerr)
		}
	}
	if q.updateCartItemStmt != nil {
		if cerr := q.updateCartItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCartItemStmt: %w", cerr)
		}
	}
	if q.updateOrderStatusStmt != nil {
		if cerr := q.updateOrderStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrderStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	addCartItemStmt       *sql.Stmt
	clearCartStmt         *sql.Stmt
	createCartStmt        *sql.Stmt
	createOrderStmt       *sql.Stmt
	createOrderItemStmt   *sql.Stmt
	deleteCartStmt        *sql.Stmt
	deleteOrderStmt       *sql.Stmt
	getCartStmt           *sql.Stmt
	getOrderStmt          *sql.Stmt
	getOrderItemsStmt     *sql.Stmt
	listOrdersStmt        *sql.Stmt
	removeCartItemStmt    *sql.Stmt
	updateCartItemStmt    *sql.Stmt
	updateOrderStatusStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		addCartItemStmt:       q.addCartItemStmt,
		clearCartStmt:         q.clearCartStmt,
		createCartStmt:        q.createCartStmt,
		createOrderStmt:       q.createOrderStmt,
		createOrderItemStmt:   q.createOrderItemStmt,
		deleteCartStmt:        q.deleteCartStmt,
		deleteOrderStmt:       q.deleteOrderStmt,
		getCartStmt:           q.getCartStmt,
		getOrderStmt:          q.getOrderStmt,
		getOrderItemsStmt:     q.getOrderItemsStmt,
		listOrdersStmt:        q.listOrdersStmt,
		removeCartItemStmt:    q.removeCartItemStmt,
		updateCartItemStmt:    q.updateCartItemStmt,
		updateOrderStatusStmt: q.updateOrderStatusStmt,
	}
}
