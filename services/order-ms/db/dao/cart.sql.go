// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package dao

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO cart_items (
    cart_id,
    product_id,
    quantity
) VALUES (
    $1,
    $2,
    $3
) ON CONFLICT (cart_id, product_id) DO UPDATE
SET quantity = cart_items.quantity + EXCLUDED.quantity,
    updated_at = NOW()
RETURNING id, cart_id, product_id, quantity, created_at, updated_at
`

type AddCartItemParams struct {
	CartID    uuid.UUID `json:"cart_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (CartItem, error) {
	row := q.queryRow(ctx, q.addCartItemStmt, addCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items WHERE cart_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, cartID uuid.UUID) error {
	_, err := q.exec(ctx, q.clearCartStmt, clearCart, cartID)
	return err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (
    user_id
) VALUES (
    $1
) RETURNING id, user_id, created_at, updated_at
`

func (q *Queries) CreateCart(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.queryRow(ctx, q.createCartStmt, createCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM carts WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCartStmt, deleteCart, id)
	return err
}

const getCart = `-- name: GetCart :one
SELECT c.id, c.user_id, c.created_at, c.updated_at, 
    COALESCE(
        json_agg(
            json_build_object(
                'id', ci.id,
                'product_id', ci.product_id,
                'quantity', ci.quantity
            )
        ) FILTER (WHERE ci.id IS NOT NULL),
        '[]'
    ) as items
FROM carts c
LEFT JOIN cart_items ci ON c.id = ci.cart_id
WHERE c.user_id = $1
GROUP BY c.id
`

type GetCartRow struct {
	ID        uuid.UUID   `json:"id"`
	UserID    uuid.UUID   `json:"user_id"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Items     interface{} `json:"items"`
}

func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) (GetCartRow, error) {
	row := q.queryRow(ctx, q.getCartStmt, getCart, userID)
	var i GetCartRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Items,
	)
	return i, err
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE FROM cart_items
WHERE cart_id = $1 AND product_id = $2
`

type RemoveCartItemParams struct {
	CartID    uuid.UUID `json:"cart_id"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.exec(ctx, q.removeCartItemStmt, removeCartItem, arg.CartID, arg.ProductID)
	return err
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE cart_items
SET 
    quantity = $3,
    updated_at = NOW()
WHERE cart_id = $1 AND product_id = $2
RETURNING id, cart_id, product_id, quantity, created_at, updated_at
`

type UpdateCartItemParams struct {
	CartID    uuid.UUID `json:"cart_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (CartItem, error) {
	row := q.queryRow(ctx, q.updateCartItemStmt, updateCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
