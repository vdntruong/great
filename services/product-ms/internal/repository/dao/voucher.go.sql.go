// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: voucher.go.sql

package dao

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const AddVoucherCategory = `-- name: AddVoucherCategory :exec
INSERT INTO voucher_categories (voucher_id, category_id)
VALUES ($1, $2)
`

type AddVoucherCategoryParams struct {
	VoucherID  uuid.UUID `db:"voucher_id" json:"voucher_id"`
	CategoryID uuid.UUID `db:"category_id" json:"category_id"`
}

func (q *Queries) AddVoucherCategory(ctx context.Context, arg *AddVoucherCategoryParams) error {
	_, err := q.exec(ctx, q.addVoucherCategoryStmt, AddVoucherCategory, arg.VoucherID, arg.CategoryID)
	return err
}

const AddVoucherProduct = `-- name: AddVoucherProduct :exec
INSERT INTO voucher_products (voucher_id, product_id)
VALUES ($1, $2)
`

type AddVoucherProductParams struct {
	VoucherID uuid.UUID `db:"voucher_id" json:"voucher_id"`
	ProductID uuid.UUID `db:"product_id" json:"product_id"`
}

func (q *Queries) AddVoucherProduct(ctx context.Context, arg *AddVoucherProductParams) error {
	_, err := q.exec(ctx, q.addVoucherProductStmt, AddVoucherProduct, arg.VoucherID, arg.ProductID)
	return err
}

const CreateVoucher = `-- name: CreateVoucher :one
INSERT INTO vouchers (
    id, store_id, code, type, value, min_purchase_amount,
    max_discount_amount, start_date, end_date, usage_limit, status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, store_id, code, type, value, min_purchase_amount, max_discount_amount, start_date, end_date, usage_limit, usage_count, status, created_at, updated_at
`

type CreateVoucherParams struct {
	ID                uuid.UUID      `db:"id" json:"id"`
	StoreID           uuid.UUID      `db:"store_id" json:"store_id"`
	Code              string         `db:"code" json:"code"`
	Type              VoucherType    `db:"type" json:"type"`
	Value             sql.NullString `db:"value" json:"value"`
	MinPurchaseAmount sql.NullString `db:"min_purchase_amount" json:"min_purchase_amount"`
	MaxDiscountAmount sql.NullString `db:"max_discount_amount" json:"max_discount_amount"`
	StartDate         time.Time      `db:"start_date" json:"start_date"`
	EndDate           sql.NullTime   `db:"end_date" json:"end_date"`
	UsageLimit        sql.NullInt32  `db:"usage_limit" json:"usage_limit"`
	Status            VoucherStatus  `db:"status" json:"status"`
}

func (q *Queries) CreateVoucher(ctx context.Context, arg *CreateVoucherParams) (*Voucher, error) {
	row := q.queryRow(ctx, q.createVoucherStmt, CreateVoucher,
		arg.ID,
		arg.StoreID,
		arg.Code,
		arg.Type,
		arg.Value,
		arg.MinPurchaseAmount,
		arg.MaxDiscountAmount,
		arg.StartDate,
		arg.EndDate,
		arg.UsageLimit,
		arg.Status,
	)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Code,
		&i.Type,
		&i.Value,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.StartDate,
		&i.EndDate,
		&i.UsageLimit,
		&i.UsageCount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteVoucher = `-- name: DeleteVoucher :exec
DELETE FROM vouchers WHERE id = $1
`

func (q *Queries) DeleteVoucher(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteVoucherStmt, DeleteVoucher, id)
	return err
}

const GetVoucherByCode = `-- name: GetVoucherByCode :one
SELECT id, store_id, code, type, value, min_purchase_amount, max_discount_amount, start_date, end_date, usage_limit, usage_count, status, created_at, updated_at FROM vouchers WHERE store_id = $1 AND code = $2
`

type GetVoucherByCodeParams struct {
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
	Code    string    `db:"code" json:"code"`
}

func (q *Queries) GetVoucherByCode(ctx context.Context, arg *GetVoucherByCodeParams) (*Voucher, error) {
	row := q.queryRow(ctx, q.getVoucherByCodeStmt, GetVoucherByCode, arg.StoreID, arg.Code)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Code,
		&i.Type,
		&i.Value,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.StartDate,
		&i.EndDate,
		&i.UsageLimit,
		&i.UsageCount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetVoucherByID = `-- name: GetVoucherByID :one
SELECT id, store_id, code, type, value, min_purchase_amount, max_discount_amount, start_date, end_date, usage_limit, usage_count, status, created_at, updated_at FROM vouchers WHERE id = $1
`

func (q *Queries) GetVoucherByID(ctx context.Context, id uuid.UUID) (*Voucher, error) {
	row := q.queryRow(ctx, q.getVoucherByIDStmt, GetVoucherByID, id)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Code,
		&i.Type,
		&i.Value,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.StartDate,
		&i.EndDate,
		&i.UsageLimit,
		&i.UsageCount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const IncrementVoucherUsage = `-- name: IncrementVoucherUsage :exec
UPDATE vouchers
SET usage_count = usage_count + 1
WHERE id = $1 AND (usage_limit IS NULL OR usage_count < usage_limit)
`

func (q *Queries) IncrementVoucherUsage(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.incrementVoucherUsageStmt, IncrementVoucherUsage, id)
	return err
}

const ListVouchers = `-- name: ListVouchers :many
SELECT id, store_id, code, type, value, min_purchase_amount, max_discount_amount, start_date, end_date, usage_limit, usage_count, status, created_at, updated_at FROM vouchers
WHERE store_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListVouchersParams struct {
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
	Limit   int32     `db:"limit" json:"limit"`
	Offset  int32     `db:"offset" json:"offset"`
}

func (q *Queries) ListVouchers(ctx context.Context, arg *ListVouchersParams) ([]*Voucher, error) {
	rows, err := q.query(ctx, q.listVouchersStmt, ListVouchers, arg.StoreID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Voucher{}
	for rows.Next() {
		var i Voucher
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Code,
			&i.Type,
			&i.Value,
			&i.MinPurchaseAmount,
			&i.MaxDiscountAmount,
			&i.StartDate,
			&i.EndDate,
			&i.UsageLimit,
			&i.UsageCount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveVoucherCategory = `-- name: RemoveVoucherCategory :exec
DELETE FROM voucher_categories
WHERE voucher_id = $1 AND category_id = $2
`

type RemoveVoucherCategoryParams struct {
	VoucherID  uuid.UUID `db:"voucher_id" json:"voucher_id"`
	CategoryID uuid.UUID `db:"category_id" json:"category_id"`
}

func (q *Queries) RemoveVoucherCategory(ctx context.Context, arg *RemoveVoucherCategoryParams) error {
	_, err := q.exec(ctx, q.removeVoucherCategoryStmt, RemoveVoucherCategory, arg.VoucherID, arg.CategoryID)
	return err
}

const RemoveVoucherProduct = `-- name: RemoveVoucherProduct :exec
DELETE FROM voucher_products
WHERE voucher_id = $1 AND product_id = $2
`

type RemoveVoucherProductParams struct {
	VoucherID uuid.UUID `db:"voucher_id" json:"voucher_id"`
	ProductID uuid.UUID `db:"product_id" json:"product_id"`
}

func (q *Queries) RemoveVoucherProduct(ctx context.Context, arg *RemoveVoucherProductParams) error {
	_, err := q.exec(ctx, q.removeVoucherProductStmt, RemoveVoucherProduct, arg.VoucherID, arg.ProductID)
	return err
}

const UpdateVoucher = `-- name: UpdateVoucher :one
UPDATE vouchers SET
    code = COALESCE(NULLIF($2, ''), code),
    type = COALESCE(NULLIF($3, '')::voucher_type, type),
    value = COALESCE(NULLIF($4, ''), value),
    min_purchase_amount = COALESCE(NULLIF($5, ''), min_purchase_amount),
    max_discount_amount = COALESCE(NULLIF($6, ''), max_discount_amount),
    start_date = COALESCE($7, start_date),
    end_date = COALESCE($8, end_date),
    usage_limit = COALESCE($9, usage_limit),
    status = COALESCE(NULLIF($10, '')::voucher_status, status),
    updated_at = NOW()
WHERE id = $1
RETURNING id, store_id, code, type, value, min_purchase_amount, max_discount_amount, start_date, end_date, usage_limit, usage_count, status, created_at, updated_at
`

type UpdateVoucherParams struct {
	ID         uuid.UUID     `db:"id" json:"id"`
	Column2    interface{}   `db:"column_2" json:"column_2"`
	Column3    interface{}   `db:"column_3" json:"column_3"`
	Column4    interface{}   `db:"column_4" json:"column_4"`
	Column5    interface{}   `db:"column_5" json:"column_5"`
	Column6    interface{}   `db:"column_6" json:"column_6"`
	StartDate  time.Time     `db:"start_date" json:"start_date"`
	EndDate    sql.NullTime  `db:"end_date" json:"end_date"`
	UsageLimit sql.NullInt32 `db:"usage_limit" json:"usage_limit"`
	Column10   interface{}   `db:"column_10" json:"column_10"`
}

func (q *Queries) UpdateVoucher(ctx context.Context, arg *UpdateVoucherParams) (*Voucher, error) {
	row := q.queryRow(ctx, q.updateVoucherStmt, UpdateVoucher,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.StartDate,
		arg.EndDate,
		arg.UsageLimit,
		arg.Column10,
	)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Code,
		&i.Type,
		&i.Value,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.StartDate,
		&i.EndDate,
		&i.UsageLimit,
		&i.UsageCount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateVoucherStatus = `-- name: UpdateVoucherStatus :exec
UPDATE vouchers
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateVoucherStatusParams struct {
	ID     uuid.UUID     `db:"id" json:"id"`
	Status VoucherStatus `db:"status" json:"status"`
}

func (q *Queries) UpdateVoucherStatus(ctx context.Context, arg *UpdateVoucherStatusParams) error {
	_, err := q.exec(ctx, q.updateVoucherStatusStmt, UpdateVoucherStatus, arg.ID, arg.Status)
	return err
}
