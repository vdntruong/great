// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_variant.sql

package dao

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const CountProductVariants = `-- name: CountProductVariants :one
SELECT COUNT(*) FROM product_variants
WHERE product_id = $1
`

func (q *Queries) CountProductVariants(ctx context.Context, productID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countProductVariantsStmt, CountProductVariants, productID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateProductVariant = `-- name: CreateProductVariant :one
INSERT INTO product_variants (
    product_id,
    name,
    sku,
    barcode,
    price,
    compare_at_price,
    cost_price,
    weight,
    weight_unit,
    inventory_quantity,
    inventory_policy,
    inventory_tracking,
    option_values
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at
`

type CreateProductVariantParams struct {
	ProductID         uuid.UUID       `db:"product_id" json:"product_id"`
	Name              string          `db:"name" json:"name"`
	Sku               sql.NullString  `db:"sku" json:"sku"`
	Barcode           sql.NullString  `db:"barcode" json:"barcode"`
	Price             string          `db:"price" json:"price"`
	CompareAtPrice    sql.NullString  `db:"compare_at_price" json:"compare_at_price"`
	CostPrice         sql.NullString  `db:"cost_price" json:"cost_price"`
	Weight            sql.NullString  `db:"weight" json:"weight"`
	WeightUnit        sql.NullString  `db:"weight_unit" json:"weight_unit"`
	InventoryQuantity sql.NullInt32   `db:"inventory_quantity" json:"inventory_quantity"`
	InventoryPolicy   sql.NullString  `db:"inventory_policy" json:"inventory_policy"`
	InventoryTracking sql.NullBool    `db:"inventory_tracking" json:"inventory_tracking"`
	OptionValues      json.RawMessage `db:"option_values" json:"option_values"`
}

func (q *Queries) CreateProductVariant(ctx context.Context, arg *CreateProductVariantParams) (*ProductVariant, error) {
	row := q.queryRow(ctx, q.createProductVariantStmt, CreateProductVariant,
		arg.ProductID,
		arg.Name,
		arg.Sku,
		arg.Barcode,
		arg.Price,
		arg.CompareAtPrice,
		arg.CostPrice,
		arg.Weight,
		arg.WeightUnit,
		arg.InventoryQuantity,
		arg.InventoryPolicy,
		arg.InventoryTracking,
		arg.OptionValues,
	)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Sku,
		&i.Barcode,
		&i.Price,
		&i.CompareAtPrice,
		&i.CostPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.InventoryQuantity,
		&i.InventoryPolicy,
		&i.InventoryTracking,
		&i.OptionValues,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteProductVariant = `-- name: DeleteProductVariant :exec
DELETE FROM product_variants
WHERE id = $1
`

func (q *Queries) DeleteProductVariant(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProductVariantStmt, DeleteProductVariant, id)
	return err
}

const DeleteProductVariants = `-- name: DeleteProductVariants :exec
DELETE FROM product_variants
WHERE product_id = $1
`

func (q *Queries) DeleteProductVariants(ctx context.Context, productID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProductVariantsStmt, DeleteProductVariants, productID)
	return err
}

const GetProductVariant = `-- name: GetProductVariant :one
SELECT id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at FROM product_variants
WHERE id = $1
`

func (q *Queries) GetProductVariant(ctx context.Context, id uuid.UUID) (*ProductVariant, error) {
	row := q.queryRow(ctx, q.getProductVariantStmt, GetProductVariant, id)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Sku,
		&i.Barcode,
		&i.Price,
		&i.CompareAtPrice,
		&i.CostPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.InventoryQuantity,
		&i.InventoryPolicy,
		&i.InventoryTracking,
		&i.OptionValues,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetVariantByBarcode = `-- name: GetVariantByBarcode :one
SELECT id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at FROM product_variants
WHERE product_id = $1 AND barcode = $2
`

type GetVariantByBarcodeParams struct {
	ProductID uuid.UUID      `db:"product_id" json:"product_id"`
	Barcode   sql.NullString `db:"barcode" json:"barcode"`
}

func (q *Queries) GetVariantByBarcode(ctx context.Context, arg *GetVariantByBarcodeParams) (*ProductVariant, error) {
	row := q.queryRow(ctx, q.getVariantByBarcodeStmt, GetVariantByBarcode, arg.ProductID, arg.Barcode)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Sku,
		&i.Barcode,
		&i.Price,
		&i.CompareAtPrice,
		&i.CostPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.InventoryQuantity,
		&i.InventoryPolicy,
		&i.InventoryTracking,
		&i.OptionValues,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetVariantBySKU = `-- name: GetVariantBySKU :one
SELECT id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at FROM product_variants
WHERE product_id = $1 AND sku = $2
`

type GetVariantBySKUParams struct {
	ProductID uuid.UUID      `db:"product_id" json:"product_id"`
	Sku       sql.NullString `db:"sku" json:"sku"`
}

func (q *Queries) GetVariantBySKU(ctx context.Context, arg *GetVariantBySKUParams) (*ProductVariant, error) {
	row := q.queryRow(ctx, q.getVariantBySKUStmt, GetVariantBySKU, arg.ProductID, arg.Sku)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Sku,
		&i.Barcode,
		&i.Price,
		&i.CompareAtPrice,
		&i.CostPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.InventoryQuantity,
		&i.InventoryPolicy,
		&i.InventoryTracking,
		&i.OptionValues,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListProductVariants = `-- name: ListProductVariants :many
SELECT id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at FROM product_variants
WHERE product_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProductVariants(ctx context.Context, productID uuid.UUID) ([]*ProductVariant, error) {
	rows, err := q.query(ctx, q.listProductVariantsStmt, ListProductVariants, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProductVariant{}
	for rows.Next() {
		var i ProductVariant
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Sku,
			&i.Barcode,
			&i.Price,
			&i.CompareAtPrice,
			&i.CostPrice,
			&i.Weight,
			&i.WeightUnit,
			&i.InventoryQuantity,
			&i.InventoryPolicy,
			&i.InventoryTracking,
			&i.OptionValues,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProductVariant = `-- name: UpdateProductVariant :one
UPDATE product_variants
SET
    name = COALESCE($2, name),
    sku = COALESCE($3, sku),
    barcode = COALESCE($4, barcode),
    price = COALESCE($5, price),
    compare_at_price = COALESCE($6, compare_at_price),
    cost_price = COALESCE($7, cost_price),
    weight = COALESCE($8, weight),
    weight_unit = COALESCE($9, weight_unit),
    inventory_quantity = COALESCE($10, inventory_quantity),
    inventory_policy = COALESCE($11, inventory_policy),
    inventory_tracking = COALESCE($12, inventory_tracking),
    option_values = COALESCE($13, option_values)
WHERE id = $1
RETURNING id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at
`

type UpdateProductVariantParams struct {
	ID                uuid.UUID       `db:"id" json:"id"`
	Name              string          `db:"name" json:"name"`
	Sku               sql.NullString  `db:"sku" json:"sku"`
	Barcode           sql.NullString  `db:"barcode" json:"barcode"`
	Price             string          `db:"price" json:"price"`
	CompareAtPrice    sql.NullString  `db:"compare_at_price" json:"compare_at_price"`
	CostPrice         sql.NullString  `db:"cost_price" json:"cost_price"`
	Weight            sql.NullString  `db:"weight" json:"weight"`
	WeightUnit        sql.NullString  `db:"weight_unit" json:"weight_unit"`
	InventoryQuantity sql.NullInt32   `db:"inventory_quantity" json:"inventory_quantity"`
	InventoryPolicy   sql.NullString  `db:"inventory_policy" json:"inventory_policy"`
	InventoryTracking sql.NullBool    `db:"inventory_tracking" json:"inventory_tracking"`
	OptionValues      json.RawMessage `db:"option_values" json:"option_values"`
}

func (q *Queries) UpdateProductVariant(ctx context.Context, arg *UpdateProductVariantParams) (*ProductVariant, error) {
	row := q.queryRow(ctx, q.updateProductVariantStmt, UpdateProductVariant,
		arg.ID,
		arg.Name,
		arg.Sku,
		arg.Barcode,
		arg.Price,
		arg.CompareAtPrice,
		arg.CostPrice,
		arg.Weight,
		arg.WeightUnit,
		arg.InventoryQuantity,
		arg.InventoryPolicy,
		arg.InventoryTracking,
		arg.OptionValues,
	)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Sku,
		&i.Barcode,
		&i.Price,
		&i.CompareAtPrice,
		&i.CostPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.InventoryQuantity,
		&i.InventoryPolicy,
		&i.InventoryTracking,
		&i.OptionValues,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateVariantInventory = `-- name: UpdateVariantInventory :one
UPDATE product_variants
SET inventory_quantity = inventory_quantity + $2
WHERE id = $1
RETURNING id, product_id, name, sku, barcode, price, compare_at_price, cost_price, weight, weight_unit, inventory_quantity, inventory_policy, inventory_tracking, option_values, created_at, updated_at
`

type UpdateVariantInventoryParams struct {
	ID                uuid.UUID     `db:"id" json:"id"`
	InventoryQuantity sql.NullInt32 `db:"inventory_quantity" json:"inventory_quantity"`
}

func (q *Queries) UpdateVariantInventory(ctx context.Context, arg *UpdateVariantInventoryParams) (*ProductVariant, error) {
	row := q.queryRow(ctx, q.updateVariantInventoryStmt, UpdateVariantInventory, arg.ID, arg.InventoryQuantity)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Sku,
		&i.Barcode,
		&i.Price,
		&i.CompareAtPrice,
		&i.CostPrice,
		&i.Weight,
		&i.WeightUnit,
		&i.InventoryQuantity,
		&i.InventoryPolicy,
		&i.InventoryTracking,
		&i.OptionValues,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
