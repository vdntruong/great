// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: store_category.sql

package dao

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountStoreCategories = `-- name: CountStoreCategories :one
SELECT COUNT(*) FROM store_categories
WHERE store_id = $1
`

func (q *Queries) CountStoreCategories(ctx context.Context, storeID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countStoreCategoriesStmt, CountStoreCategories, storeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountStoreCategoriesByParent = `-- name: CountStoreCategoriesByParent :one
SELECT COUNT(*) FROM store_categories
WHERE store_id = $1 AND parent_id = $2
`

type CountStoreCategoriesByParentParams struct {
	StoreID  uuid.UUID     `db:"store_id" json:"store_id"`
	ParentID uuid.NullUUID `db:"parent_id" json:"parent_id"`
}

func (q *Queries) CountStoreCategoriesByParent(ctx context.Context, arg *CountStoreCategoriesByParentParams) (int64, error) {
	row := q.queryRow(ctx, q.countStoreCategoriesByParentStmt, CountStoreCategoriesByParent, arg.StoreID, arg.ParentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateStoreCategory = `-- name: CreateStoreCategory :one
INSERT INTO store_categories (
    store_id,
    name,
    slug,
    description,
    parent_id,
    sort_order
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at
`

type CreateStoreCategoryParams struct {
	StoreID     uuid.UUID      `db:"store_id" json:"store_id"`
	Name        string         `db:"name" json:"name"`
	Slug        string         `db:"slug" json:"slug"`
	Description sql.NullString `db:"description" json:"description"`
	ParentID    uuid.NullUUID  `db:"parent_id" json:"parent_id"`
	SortOrder   sql.NullInt32  `db:"sort_order" json:"sort_order"`
}

func (q *Queries) CreateStoreCategory(ctx context.Context, arg *CreateStoreCategoryParams) (*StoreCategory, error) {
	row := q.queryRow(ctx, q.createStoreCategoryStmt, CreateStoreCategory,
		arg.StoreID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ParentID,
		arg.SortOrder,
	)
	var i StoreCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteStoreCategory = `-- name: DeleteStoreCategory :exec
DELETE FROM store_categories
WHERE id = $1
`

func (q *Queries) DeleteStoreCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteStoreCategoryStmt, DeleteStoreCategory, id)
	return err
}

const GetStoreCategory = `-- name: GetStoreCategory :one
SELECT id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at FROM store_categories
WHERE id = $1
`

func (q *Queries) GetStoreCategory(ctx context.Context, id uuid.UUID) (*StoreCategory, error) {
	row := q.queryRow(ctx, q.getStoreCategoryStmt, GetStoreCategory, id)
	var i StoreCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetStoreCategoryBySlug = `-- name: GetStoreCategoryBySlug :one
SELECT id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at FROM store_categories
WHERE store_id = $1 AND slug = $2
`

type GetStoreCategoryBySlugParams struct {
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
	Slug    string    `db:"slug" json:"slug"`
}

func (q *Queries) GetStoreCategoryBySlug(ctx context.Context, arg *GetStoreCategoryBySlugParams) (*StoreCategory, error) {
	row := q.queryRow(ctx, q.getStoreCategoryBySlugStmt, GetStoreCategoryBySlug, arg.StoreID, arg.Slug)
	var i StoreCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListRootStoreCategories = `-- name: ListRootStoreCategories :many
SELECT id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at FROM store_categories
WHERE store_id = $1 AND parent_id IS NULL
ORDER BY sort_order ASC, created_at DESC
`

func (q *Queries) ListRootStoreCategories(ctx context.Context, storeID uuid.UUID) ([]*StoreCategory, error) {
	rows, err := q.query(ctx, q.listRootStoreCategoriesStmt, ListRootStoreCategories, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StoreCategory{}
	for rows.Next() {
		var i StoreCategory
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ParentID,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListStoreCategories = `-- name: ListStoreCategories :many
SELECT id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at FROM store_categories
WHERE store_id = $1
ORDER BY sort_order ASC, created_at DESC
`

func (q *Queries) ListStoreCategories(ctx context.Context, storeID uuid.UUID) ([]*StoreCategory, error) {
	rows, err := q.query(ctx, q.listStoreCategoriesStmt, ListStoreCategories, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StoreCategory{}
	for rows.Next() {
		var i StoreCategory
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ParentID,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListStoreCategoriesByParent = `-- name: ListStoreCategoriesByParent :many
SELECT id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at FROM store_categories
WHERE store_id = $1 AND parent_id = $2
ORDER BY sort_order ASC, created_at DESC
`

type ListStoreCategoriesByParentParams struct {
	StoreID  uuid.UUID     `db:"store_id" json:"store_id"`
	ParentID uuid.NullUUID `db:"parent_id" json:"parent_id"`
}

func (q *Queries) ListStoreCategoriesByParent(ctx context.Context, arg *ListStoreCategoriesByParentParams) ([]*StoreCategory, error) {
	rows, err := q.query(ctx, q.listStoreCategoriesByParentStmt, ListStoreCategoriesByParent, arg.StoreID, arg.ParentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StoreCategory{}
	for rows.Next() {
		var i StoreCategory
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ParentID,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateStoreCategory = `-- name: UpdateStoreCategory :one
UPDATE store_categories
SET
    name = COALESCE($2, name),
    slug = COALESCE($3, slug),
    description = COALESCE($4, description),
    parent_id = COALESCE($5, parent_id),
    sort_order = COALESCE($6, sort_order)
WHERE id = $1
RETURNING id, store_id, name, slug, description, parent_id, sort_order, created_at, updated_at
`

type UpdateStoreCategoryParams struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Slug        string         `db:"slug" json:"slug"`
	Description sql.NullString `db:"description" json:"description"`
	ParentID    uuid.NullUUID  `db:"parent_id" json:"parent_id"`
	SortOrder   sql.NullInt32  `db:"sort_order" json:"sort_order"`
}

func (q *Queries) UpdateStoreCategory(ctx context.Context, arg *UpdateStoreCategoryParams) (*StoreCategory, error) {
	row := q.queryRow(ctx, q.updateStoreCategoryStmt, UpdateStoreCategory,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ParentID,
		arg.SortOrder,
	)
	var i StoreCategory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
