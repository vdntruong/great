services:

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user-db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  auth-ms:
    build:
      context: .
      dockerfile: ../../services/auth-ms/deployments/Dockerfile
    ports:
      - "8081:8080"
    environment:
      - OTLP_ENDPOINT=otel-collector:4317
    networks:
      - backend

  user-ms:
    build:
      context: .
      dockerfile: ../../services/user-ms/deployments/Dockerfile
    ports:
      - "8082:8080"
      - "9092:9090"
    environment:
      - OTLP_ENDPOINT=otel-collector:4317
      - HTTP_ADDR=:8080
      - GRPC_ADDR=:9090
      - DB_HOST=postgres
    networks:
      - backend
    depends_on:
      - postgres

  reverse-proxy:
    image: traefik:v3.2.1
    command:
      - "--api.insecure=true"
      - "--configFile=/etc/traefik/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../services/gateway/traefik.yml:/etc/traefik/traefik.yml:ro
      - ../../services/gateway/configs:/etc/traefik/configs
    depends_on:
      - user-ms
      - auth-ms
    networks:
      - backend
      - frontend

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.115.1
    command: --config=/etc/otelcol-contrib/config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
#      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "1888:1888"   # pprof extension
      - "55679:55679" # zpages extension
      - "13133:13133" # health_check extension
    volumes:
      - ./otel-collector:/etc/otelcol-contrib
    environment:
      - SERVICE_NAME=default-service
    networks:
      - backend
      - monitoring

  # jaeger ports: https://www.jaegertracing.io/docs/1.64/deployment/#collector
  jaeger:
    image: jaegertracing/all-in-one:1.64.0
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # OTLP gRPC receiver
      - "14268:14268"  # Accept Thrift spans
      - "9411:9411"    # Zipkin
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring
    depends_on:
      - otel-collector

  prometheus:
    image: prom/prometheus:v3.0.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--enable-feature=otlp-write-receive'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - monitoring
    depends_on:
      - otel-collector

  loki:
    image: grafana/loki:3.2.2
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki-data:/loki
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - "3000:3000"
    networks:
      - monitoring

networks:
  backend:
  frontend:
  monitoring:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  loki-data:
  grafana-data:
