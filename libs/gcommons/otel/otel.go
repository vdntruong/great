package otel

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutlog"
	"go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
	"go.opentelemetry.io/otel/log/global"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/semconv/v1.26.0"
	"go.opentelemetry.io/otel/trace"

	sdklog "go.opentelemetry.io/otel/sdk/log"
	sdkmetric "go.opentelemetry.io/otel/sdk/metric"
	sdkresource "go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
)

var (
	otlpEndpoint string

	tracer trace.Tracer
	meter  metric.Meter
)

func init() {
	otlpEndpoint = os.Getenv("OTLP_ENDPOINT")
	if otlpEndpoint == "" {
		panic("OTLP_ENDPOINT environment variable must be set")
	}
}

func GetTracer() trace.Tracer {
	if tracer == nil {
		panic("nil tracer") // TODO
	}
	return tracer
}

func GetMeter() metric.Meter {
	if meter == nil {
		panic("nil meter") // TODO
	}
	return meter
}

// traces

func newConsoleTraceExporter() (sdktrace.SpanExporter, error) {
	return stdouttrace.New(stdouttrace.WithPrettyPrint())
}

func newOTLPTraceExporter(ctx context.Context) (sdktrace.SpanExporter, error) {
	insecureOpt := otlptracegrpc.WithInsecure()
	endpointOpt := otlptracegrpc.WithEndpoint(otlpEndpoint)
	return otlptracegrpc.New(ctx, insecureOpt, endpointOpt)
}

func newTraceProvider(exp sdktrace.SpanExporter, serviceName string, serviceVersion string) *sdktrace.TracerProvider {
	/**
	What is sampling?
	Sampling is the process of selecting a subset of traces to be recorded and exported out of the total number of traces generated by your distributed system

	sdktrace.AlwaysSample()
	- Records every single trace
	- Useful for development and debugging
	- Not recommended for production high-traffic systems

	sdktrace.NeverSample()
	- Records no traces
	- Essentially turns off tracing

	sdktrace.TraceIDRatioBased(0.1)
	- Samples a fixed percentage of traces
	- Probabilistic sampling based on trace ID
	- Ensures consistent sampling across a distributed trace
	example: sdktrace.TraceIDRatioBased(0.25) -> Sample 25% of traces in production

	sdktrace.ParentBasedAlwaysOn()
	sdktrace.ParentBasedAlwaysOff()
	- Makes sampling decisions based on the parent span's sampling state
	- Useful for maintaining trace consistency

	sdktrace.RateLimitingSampler(10)
	- Limit to 10 traces per second
	*/

	r, err := sdkresource.Merge(
		sdkresource.Default(),
		sdkresource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceName(serviceName),
			semconv.ServiceVersion(serviceVersion),
		),
	)
	if err != nil {
		panic(err)
	}

	return sdktrace.NewTracerProvider(
		sdktrace.WithResource(r),
		sdktrace.WithSampler(sdktrace.AlwaysSample()),
		sdktrace.WithBatcher(exp, sdktrace.WithBatchTimeout(time.Second)), // Default is 5s. Set to 1s for demonstrative purposes.
	)
}

// metrics

func newOTLPMetricExporter(ctx context.Context) (sdkmetric.Exporter, error) {
	insecureOpt := otlpmetricgrpc.WithInsecure()
	endpointOpt := otlpmetricgrpc.WithEndpoint(otlpEndpoint)
	return otlpmetricgrpc.New(ctx, insecureOpt, endpointOpt)
}

func newMeterProvider(exp sdkmetric.Exporter, interval time.Duration) *sdkmetric.MeterProvider {
	meterReader := sdkmetric.NewPeriodicReader(exp, sdkmetric.WithInterval(interval))
	meterProvider := sdkmetric.NewMeterProvider(sdkmetric.WithReader(meterReader))
	return meterProvider
}

// logs

func newConsoleLogExporter() (sdklog.Exporter, error) {
	return stdoutlog.New(stdoutlog.WithPrettyPrint())
}

func newLoggerProvider(exp sdklog.Exporter) *sdklog.LoggerProvider {
	loggerProvider := sdklog.NewLoggerProvider(
		sdklog.WithProcessor(sdklog.NewBatchProcessor(exp)),
	)
	return loggerProvider
}

// propagator

func newPropagator() propagation.TextMapPropagator {
	return propagation.NewCompositeTextMapPropagator(
		propagation.TraceContext{},
		propagation.Baggage{},
	)
}

func SetupOpenTelemetry(serviceName, serviceVersion string) (func(), error) {
	log.Printf("Setting up OpenTelemetry for service: %s", serviceName)

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// traces
	traceExp, err := newOTLPTraceExporter(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create trace exporter: %w", err)
	}

	tp := newTraceProvider(traceExp, serviceName, serviceVersion)
	otel.SetTracerProvider(tp)

	// metrics
	metricExp, err := newOTLPMetricExporter(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create metric exporter: %w", err)
	}

	mp := newMeterProvider(metricExp, 10*time.Second)
	otel.SetMeterProvider(mp)

	// logs
	logExp, err := newConsoleLogExporter()
	if err != nil {
		return nil, fmt.Errorf("failed to create log exporter: %w", err)
	}

	lp := newLoggerProvider(logExp)
	global.SetLoggerProvider(lp)

	// propagator
	pg := newPropagator()
	otel.SetTextMapPropagator(pg)

	tracer = tp.Tracer(serviceName)
	meter = mp.Meter(serviceName)

	// register system metrics callback
	if err := initSystemMetrics(); err != nil {
		return nil, fmt.Errorf("failed to init system metrics: %w", err)
	}

	return func() {
		shutdownCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()

		if err := tp.Shutdown(shutdownCtx); err != nil {
			log.Printf("Error shutting down TracerProvider: %v\n", err)
		} else {
			log.Println("Shutting down TracerProvider")
		}

		if err := mp.Shutdown(shutdownCtx); err != nil {
			log.Printf("Error shutting down MeterProvider: %v\n", err)
		} else {
			log.Println("Shutting down MeterProvider")
		}

		if err := lp.Shutdown(shutdownCtx); err != nil {
			log.Printf("Error shutting down LogProvider: %v\n", err)
		} else {
			log.Println("Shutting down LogProvider")
		}
	}, nil
}
